"""
M√©todos de diferen√ßas finitas para equa√ß√µes diferenciais parciais de
segunda ordem.

Classes
-------
    - LinParabolic: equa√ß√£o parab√≥lica linear.
"""

__all__ = ['LinParabolic']

import types
import numpy as np

class LinParabolic(object):
    """
    Equa√ß√£o parab√≥lica linear:
        u_t = P(x, y)*u_xx + Q(x, y)*u_x + R(x, y)*u + S(x, y),

        u(x, 0)  = conds[0](x), 0 <= x <= xf,
        u(0, y)  = conds[1](y), 0 <= y <= yf,
        u(xf, y) = conds[2](y), 0 <= y <= yf.

    M√©todos:
        - Diferen√ßas finitas centrais expl√≠cito

    Par√¢metros
    ----------
    xn : int
        N√∫mero de pontos no eixo x menos um.
    xf : float
        Posi√ß√£o final no eixo x.
    yn : int
        N√∫mero de pontos no eixo y menos um.
    yf : float
        Posi√ß√£o final no eixo y.
    conds : list
        'conds[0]' √© as condi√ß√µes iniciais, 'conds[1]' e 'conds[2]'
        s√£o as condi√ß√µes de contornos em x=0 e 'xf', respectivamente.
        Cada elemento de 'conds' pode ser uma fun√ß√£o vetorial de uma
        vari√°vel, ou um escalar, ou um vetor de tamanhoxn+1' ou
        'yn+1'.
    P, Q, R, S : function, scalar, array_like | optional
        √â uma fun√ß√£o vetorial de duas vari√°veis, ou um escalar, ou
        uma matriz de tamanho (xn-1)*yn.
    mthd : string
        M√©todo para resolver a equa√ß√£o. 'ec' para diferen√ßas finitas
        centrais expl√≠cito.

    Retornos
    --------
    u : ndarray
        Uma matriz de tamanho (xn+1)*(yn+1) com os resultados,
        onde cada linha representa uma posi√ß√£o 'x' e cada coluna
        representa uma instante de tempo 'y'.
    """

    def solve(self, xn, xf, yn, yf, conds, P=1, Q=1, R=1, S=0, mthd='ec'):
        """
        M√©todo principal. Inicializa os par√¢metros e chama o m√©todo
        especificado para resolver a equa√ß√£o.
        """
        x, y       = self.set_axis(xn, xf, yn, yf)
        u          = self.set_u(x, y, conds)
        ùõÇ, Œ≤, k    = self.cal_constants(xn, xf, yn, yf)
        P, Q, R, S = self.cal_parameters(P, Q, R, S, x, y)

        if mthd == 'ec':
            self.ec(u, ùõÇ, Œ≤, k, P, Q, R, S)
        else:
            u = 0

        return u

    def ec(self, u, ùõÇ, Œ≤, k, P, Q, R, S):
        """
        Diferen√ßas finitas centrais expl√≠cito.
        """
        for j in np.arange(yn):
            u[1:-1, j+1] = (ùõÇ * P[:, j] - Œ≤ * Q[:, j]) * u[:-2, j] + \
                           (ùõÇ * P[:, j] + Œ≤ * Q[:, j]) * u[2:, j] + \
                           (1 + k * R[:, j] - 2 * ùõÇ * P[:, j]) * u[1:-1, j] + \
                           k * S[:, j]

    def set_axis(self, xn, xf, yn, yf):
        """Retorna os vetores dos eixos 'x' e 'y'."""
        x = np.linspace(0, xf, xn+1)
        y = np.linspace(0, yf, yn+1)

        return x, y

    def set_u(self, x, y, conds):
        """
        Inicializa a matriz 'u' de tamanho (xn+1)*(yn+1) com as
        condi√ß√µes iniciais e de contornos.
        """
        u = np.empty((len(x), len(y)))
        self.set_conditions(u, x, y, conds)

        return u

    def cal_constants(self, xn, xf, yn, yf):
        """Calcula as constantes 'ùõÇ', 'Œ≤' e 'k'."""
        h = xf / xn
        k = yf / yn

        ùõÇ = k / h**2
        Œ≤ = k / (2 * h)

        return ùõÇ, Œ≤, k

    def cal_parameters(self, P, Q, R, S, x, y):
        P = self.func_to_val(P, x, y)
        Q = self.func_to_val(Q, x, y)
        R = self.func_to_val(R, x, y)
        S = self.func_to_val(S, x, y)

        return P, Q, R, S

    def set_conditions(self, u, x, y, conds):
        """
        Aplica as condi√ß√µes iniciais e de contornos na matriz 'u'.
        """
        self.check_conds_type(conds, x, y)

        u[:, 0]  = conds[0]
        u[0, :]  = conds[1]
        u[-1, :] = conds[2]

    def check_conds_type(self, conds, x, y):
        """
        Verifica os tipos das condi√ß√µes iniciais e de contornos. Se
        for do tipo function, aplica os valores de 'x' ou 'y'.
        """
        conds[0] = self.func_to_val(conds[0], x)
        conds[1] = self.func_to_val(conds[1], y)
        conds[2] = self.func_to_val(conds[2], y)

    def func_to_val(self, func_or_val, *args):
        """
        Se 'func_or_val' for uma fun√ß√£o, aplica os valores de 'args',
        se for um escalar, retorna uma matriz com valores desse escalar,
        se for um vetor ou uma matriz, retorna sem modificar.
        """
        if isinstance(func_or_val, types.FunctionType):
            if len(args) == 2:
                args = np.meshgrid(args[1][1:], args[0][1:-1])
            return func_or_val(*args[::-1])

        elif isinstance(func_or_val, (int, float)):
            if len(args) == 1:
                return func_or_val
            elif len(args) == 2:
                x = np.ones((len(args[0])-2, len(args[1])-1))
                return func_or_val * x

        else:
            return func_or_val

if __name__ == '__main__':
    xn = 4
    xf = 4.
    yn = 10
    yf = 1.

    f  = lambda x: x**2 - 4*x + 5
    g1 = lambda y: 5 * np.exp(-y)
    g2 = lambda y: 5 * np.exp(-y)
    conds = [f, g1, g2]

    Q = lambda x, y: x - 2.
    R = -3.

    u = LinParabolic().solve(xn, xf, yn, yf, conds, Q=Q, R=R)

    print(u)